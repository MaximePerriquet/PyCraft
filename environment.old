import block as bl
from random import randint
import rendering as re
class Environment:
    def __init__(self,textures):
        self.__chunks = dict()
        self.__textures = textures
    def getTextures(self): return self.__textures
    def getMaxHeight(self): return 126
    def getChunks(self): return self.__chunks
    def createChunk(self,n):
        chunk = Chunk(self,n)
        self.__chunks[str(n)] = chunk

class Chunk:
    def __init__(self,env,n):         # 1 chunk = 16 blocks, max height = 256
        self.__env = env
        self.__blocks = dict()
        self.__active = True
        self.__chunkNumber = n
        self.__leftBoundaries = dict()
        self.__rightBoundaries = dict()

        if str(n-1) in self.__env.getChunks().keys():
            self.__leftBoundaries = self.__env.getChunks()[str(n-1)].getRightBoundaries()
            self.buildTerrain('fromLeft')
        elif str(n+1) in self.__env.getChunks().keys():
            self.__rightBoundaries = self.__env.getChunks()[str(n+1)].getLeftBoundaries()
            self.buildTerrain('fromRight')
        else:
            self.__leftBoundaries = {'earthFloor':20,'rockFloor':15,'oceanFloor':15}
            self.buildTerrain('fromLeft')
    def getRightBoundaries(self): return self.__rightBoundaries
    def getLeftBoundaries(self): return self.__leftBoundaries
    def buildTerrain(self,buildFrom):
        n = self.__chunkNumber
        if buildFrom == 'fromLeft': 
            index = range(16*n,16*(n+1),1)
            earthFloor = self.__leftBoundaries['earthFloor']
            rockFloor = self.__leftBoundaries['rockFloor']
            oceanFloor = self.__leftBoundaries['oceanFloor']
        else : 
            index = range(16*(n+1),16*n,-1)
            earthFloor = self.__rightBoundaries['earthFloor']
            rockFloor = self.__rightBoundaries['rockFloor']
            oceanFloor = self.__rightBoundaries['oceanFloor']

        ## generating terrain
        for i in index :
            for j in range(self.__env.getMaxHeight()):
                if j == earthFloor and j> oceanFloor:
                    block = bl.grass(self.__env,i,j)
                    self.__blocks[str(i)+'-'+str(j)] = block
                elif j<earthFloor and j>=rockFloor:
                    block = bl.dirt(self.__env,i,j)
                    self.__blocks[str(i)+'-'+str(j)] = block
                elif j<rockFloor:
                    block = bl.rock(self.__env,i,j)
                    self.__blocks[str(i)+'-'+str(j)] = block
                elif j<oceanFloor:
                    block = bl.water(self.__env,i,j)
                    self.__blocks[str(i)+'-'+str(j)] = block
            
            earthFloor = max(0,int(earthFloor + randint(-1,1)))
            rockFloor = max(0,int(rockFloor + randint(-1,1)))

        if buildFrom == 'fromLeft': 
            self.__rightBoundaries['earthFloor'] = earthFloor
            self.__rightBoundaries['rockFloor'] = rockFloor
            self.__rightBoundaries['oceanFloor'] = oceanFloor
        else : 
            self.__leftBoundaries['earthFloor'] = earthFloor
            self.__leftBoundaries['rockFloor'] = rockFloor
            self.__leftBoundaries['oceanFloor'] = oceanFloor
    def getBlocks(self): return self.__blocks
    def getEnv(self): return self.__env
    def activate(self): 
        self.__active = True
    def disactivate(self): self.__active = False
    def floorFunction(self):
        

